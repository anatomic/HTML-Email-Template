#!/usr/bin/php
<?php
$builder = new EmailBuilder();
if($builder->buildEmailVision()){
	die(0);
}
else{
	die(3);
}


class EmailBuilder{
	protected $htmlFile = 'index.html';
	protected $htmlCounter = 2;
	protected $plainFile = 'plain.txt';
	protected $plainCounter = 1;
	protected $settingsFile = 'config/settings.ini';
	protected static $settings = array();

	public function __construct(){
		if(!is_readable($this->settingsFile)){
			throw new Exception("Settings file not readable. Make sure you set it up at config/settings.ini");
		}
		$newSettings = parse_ini_file($this->settingsFile, true);
		foreach($newSettings as $group => $settings){
			if(isset(self::$settings[$group])){
				self::$settings[$group] = array_merge(self::$settings[$group], $settings);
			}
			else{
				self::$settings[$group] = $settings;
			}
		}
		if(isset(self::$settings['email']['mirror'])&&self::$settings['email']['mirror'] === 'false'){
			$this->htmlCounter = 1;
		}
	}

	public function setHtmlFile($filename){
		$this->htmlFile = $filename;
	}
	
	public function setPlainFile($filename){
		$this->plainFile = $filename;
	}
	
	protected function replaceHtmlLink($match){
		$newLink = 'href="http://'.$match["url"].'?CRE='.$this->htmlCounter;
		foreach(self::$settings['tracking']['html'] as $param => $value){
			$newLink.='&'.$param.'='.$value;
		}
		fwrite(STDOUT, 'HTML link ' . $this->htmlCounter . ': ' . $newLink . "\n");
		$this->htmlCounter++;
		return $newLink;
	}
	
	protected function replaceTextLink($match){
		$newLink = 'href="http://'.$match["url"].'?CRE='.$this->plainCounter;
		foreach(self::$settings['tracking']['text'] as $param => $value){
			$newLink.='&'.$param.'='.$value;
		}
		fwrite(STDOUT, 'Plain link ' . $this->plainCounter . ': ' . $newLink . "\n");
		$this->plainCounter++;
		return $newLink;
	}
	
	protected function replaceAllLinks($contents, $mode = 'html'){
		$linkTagPattern = '/href="http:\/\/(?P<url>[\w\d\.\/-]+)"/';
		$textLinkPattern = '/http:\/\/(?P<url>[\w\d\.\/-]+)/';
		
		if($mode === 'html'){
			$pattern = $linkTagPattern;
			$callback = 'self::replaceHtmlLink';
		}
		else{
			$pattern = $textLinkPattern;
			$callback = 'self::replaceTextLink';
		}
		
		$contents = preg_replace_callback($pattern, $callback, $contents, -1, $count);
		
		fwrite(STDOUT, 'Total '. $mode . ' links: ' . $count . "\n");
		
		return $contents;
	}

	protected function prepareHtmlForSending($html){
		$html = preg_replace('/<title>/','<title>'.self::$settings['email']['subject'], $html);
		$commentsPattern = '/<!--[\w\d .↓↥]+-->/';
		$html = preg_replace_callback($commentsPattern, function($match){return '';}, $html, -1, $count);
		fwrite(STDOUT, 'Removed ' . $count . " comments\n");
		return $html;
	}
	
	public function buildEmailVision(){
		$stdout = fopen('php://stdout', 'w');
		$html = fopen($this->htmlFile, 'r');
		$plain = fopen($this->plainFile, 'r');
		
		if(file_exists('export/emv.txt')){
			$emv = fopen('export/emv.txt', 'w');
		}
		else{
			mkdir('export', 0755);
			$emv = fopen('export/emv.txt', 'w');
		}
		
		$htmlContents = fread($html, filesize($this->htmlFile));
		$plainContents = fread($plain, filesize($this->plainFile));
		fclose($html);
		fclose($plain);
		
		$htmlContents = $this->replaceAllLinks($htmlContents, 'html');
		$plainContents = $this->replaceAllLinks($plainContents, 'plain');
		
		$htmlContents = $this->prepareHtmlForSending($htmlContents);
		
		fwrite($emv, "[EMV TEXTPART]\n");
		fwrite($emv, $plainContents);
		fwrite($emv, "\n\n");
		fwrite($emv, "[EMV HTMLPART]\n");
		fwrite($emv, $htmlContents);
		fclose($emv);
		return true;
	}
	
}