#!/usr/bin/php
<?php

$builder = new EmailBuilder();
$builder->buildEmailVision();
exit(0);

class EmailBuilder{
	protected $htmlFile = 'base.html';
	protected $htmlCounter = 2;
	protected $plainFile = 'plain.txt';
	protected $plainCounter = 1;
	protected $libsDir = 'lib';
	protected $settingsFile = 'config/settings.ini';
	protected static $settings = array();
	protected $processTemplates = false;
	protected $variants = array();
	protected $currentVariant = null;
	protected $trackingData = null;

	public function __construct(){
		if(!is_readable($this->settingsFile)){
			throw new Exception("Settings file not readable. Make sure you set it up at config/settings.ini");
		}
		$newSettings = parse_ini_file($this->settingsFile, true);
		foreach($newSettings as $group => $settings){
			if(isset(self::$settings[$group])){
				self::$settings[$group] = array_merge(self::$settings[$group], $settings);
			}
			else{
				self::$settings[$group] = $settings;
			}
		}
		$this->resetCounters();
		if(isset(self::$settings['international'])){
			$this->processTemplates = true;
			//TODO: Other setup for processing multiple templates here
		}

		if(isset(self::$settings['templates']) && count(self::$settings['templates']['versions'])>0){
			foreach(self::$settings['templates']['versions'] as $template){
				$this->variants[$template]= $this->buildEmailBody($template);
			}
		}

	}
	
	protected function resetCounters(){
		if(isset(self::$settings['email']['mirror'])&&self::$settings['email']['mirror'] === 'false'){
			$this->htmlCounter = 1;
		}
		else{
			$this->htmlCounter = 2;
		}
		$this->plainCounter = 1;
	}

	public function setHtmlFile($filename){
		$this->htmlFile = $filename;
	}
	
	public function setPlainFile($filename){
		$this->plainFile = $filename;
	}
	
	protected function replaceHtmlLink($match){
		$newLink = 'http://'.$match["url"].'?CRE='.$this->htmlCounter . "&utm_content=".$this->htmlCounter;
		foreach(self::$settings['tracking']['html'] as $param => $value){
			if($this->currentVariant!= null && ($param == 'CMP' || $param == 'utm_campaign')){
				$newLink.='&'.$param.'='.$value.$this->currentVariant;
			}
			else{
				$newLink.='&'.$param.'='.$value;	
			}
		}
		
		fwrite($this->trackingData, $this->htmlCounter . ',' . $newLink ."\n");
		fwrite(STDOUT, 'HTML link ' . $this->htmlCounter . ': ' . $newLink . "\n");
		$newLink = 'href="'.$newLink.'"';
		$this->htmlCounter++;
		return $newLink;
	}
	
	protected function replaceTextLink($match){
		$newLink = 'http://'.$match["url"].'?CRE='.$this->plainCounter . "&utm_content=".$this->plainCounter;
		foreach(self::$settings['tracking']['text'] as $param => $value){
			if($this->currentVariant!= null && ($param == 'CMP' || $param == 'utm_campaign')){
				$newLink.='&'.$param.'='.$value.$this->currentVariant;
			}
			else{
				$newLink.='&'.$param.'='.$value;	
			}
		}

		fwrite(STDOUT, 'Plain link ' . $this->plainCounter . ': ' . $newLink . "\n");
		fwrite($this->trackingData, $this->plainCounter . ',' . $newLink ."\n");
		$this->plainCounter++;
		return $newLink;
	}

	protected function buildUnsubscribeLink($type){
		$counter = $type == 'html' ? $this->htmlCounter : $this->plainCounter;
		$newLink = self::$settings['email']['unsubscribe'].'?CRE='.$counter . "&utm_content=".$counter;
		foreach(self::$settings['tracking'][$type] as $param => $value){
			if($this->currentVariant!= null && ($param == 'CMP' || $param == 'utm_campaign')){
				$newLink.='&'.$param.'='.$value.$this->currentVariant;
			}
			else{
				$newLink.='&'.$param.'='.$value;	
			}
		}

		if($type=='html'){
			$this->htmlCounter++;		
		}
		else{
			$this->plainCounter++;
		}
		
		return $newLink;
	}
	
	protected function replaceAllLinks($contents, $mode = 'html'){
		$linkTagPattern = '/href="http:\/\/(?P<url>[\w\d\.\/-]+)"/';
		$textLinkPattern = '/http:\/\/(?P<url>[\w\d\.\/-]+)/';
		
		if($mode === 'html'){
			$pattern = $linkTagPattern;
			$callback = 'self::replaceHtmlLink';
		}
		else{
			$pattern = $textLinkPattern;
			$callback = 'self::replaceTextLink';
		}
		
		$contents = preg_replace_callback($pattern, $callback, $contents, -1, $count);
		fwrite($this->trackingData, 'unsubscribe,' . $this->buildUnsubscribeLink($mode) ."\n");
		fwrite(STDOUT, "\n**\n");
		fwrite(STDOUT, 'Total '. $mode . ' links: ' . $count . "\n");
		fwrite(STDOUT, "\n====================\n\n");
		return $contents;
	}

	protected function prepareHtmlForSending($html){
		$html = $this->replaceAllLinks($html, 'html');
		$html = preg_replace('/<title>/','<title>'.self::$settings['email']['subject'], $html);

		$commentsPattern = '/<!--[\w\d\s .↓↥\*\'"\/@\.:\n\,]+-->/';
		
		$html = preg_replace_callback($commentsPattern, function($match){return "";}, $html, -1, $count);
		$html = preg_replace_callback('/\n[\s]+/', function($match){return "\n";}, $html, -1, $spaces);
		
		if(isset(self::$settings['email']['minify']) && self::$settings['email']['minify']==="true"){
			$html = preg_replace_callback('/\n/', function($match){return "";}, $html, -1, $newlines);
			fwrite(STDOUT, "Minified!\n");
		}
		
		fwrite(STDOUT, 'Removed ' . $count . " comments\n");
		fwrite(STDOUT, 'Removed ' . $spaces . " whitespace characters\n");
		fwrite(STDOUT, "\n====================\n\n");
		
		return $html;
	}
	
	protected function getContents($file){
		$fileHandle = fopen($file, 'r');
		$contents = fread($fileHandle, filesize($file));
		fclose($fileHandle);
		return $contents;
	}

	protected function buildEmailBody($template){
		$body = '';
			foreach(self::$settings['content'][$template] as $item){
				$file = $this->libsDir .'/'.$item .'.html';
				$element = fopen($file, 'r');
				$body .= fread($element, filesize($file));
				$body .= "\n\n";
			}
			return $body;
	}

	protected function outputEmailVision($name, $html, $plain){
		fwrite(STDOUT, "Beginning output of template " . $name . "\n");
		$emv = fopen('export/'.$name.'.txt', 'w');
		fwrite($emv, "[EMV TEXTPART]\n");
		fwrite($emv, $plain);
		fwrite($emv, "\n\n");
		fwrite($emv, "[EMV HTMLPART]\n");
		fwrite($emv, $html);
		fclose($emv);
		
		fwrite(STDOUT, "Exported html and plain text for Campaign Commander to export/".$name.".txt\n");
		fwrite(STDOUT, "\n====================\n");
	}
	
	public function buildEmailVision(){
		if(!is_dir('export')){
			mkdir('export', 0755);
		}
		
		$this->trackingData = fopen('export/'.self::$settings['email']['id'].'_trackingData.csv', 'w');

		fwrite(STDOUT, "Building for Email Vision\n");

		if(isset(self::$settings['templates'])){
			foreach(self::$settings['templates']['versions'] as $template){
				$this->currentVariant = $template;
				$htmlContents = $this->getContents($this->htmlFile);
				$plainContents = $this->getContents($this->plainFile);
				
				$htmlContents = preg_replace('/\{% email_body %\}/', $this->variants[$template], $htmlContents);

				$htmlContents = $this->prepareHtmlForSending($htmlContents);
				$plainContents = $this->replaceAllLinks($plainContents, 'text');
				
				$this->outputEmailVision($template, $htmlContents, $plainContents);
				$this->resetCounters();
				$this->currentVariant = null;
			}
		}
		else{
			$htmlContents = $this->getContents($this->htmlFile);
			$plainContents = $this->getContents($this->plainFile);

			$htmlContents = $this->prepareHtmlForSending($htmlContents);
			$plainContents = $this->replaceAllLinks($plainContents, 'text');
			
			$this->outputEmailVision("emv", $htmlContents, $plainContents);
			$this->resetCounters();
		}
		fclose($this->trackingData);
	}
	
	public function build(){
		fwrite(STDOUT, "Building for standard output\n");
		$htmlContents = $this->getContents($this->htmlFile);
		$plainContents = $this->getContents($this->plainFile);
		
		$htmlContents = $this->prepareHtmlForSending($htmlContents);
		$plainContents = $this->replaceAllLinks($plainContents, 'plain');
		
		if(!is_dir('export')){
			mkdir('export', 0755);
		}
		$htmlOutput = fopen('export/index.html', 'w');
		$plainOutput = fopen('export/plain.txt', 'w');
		
		fwrite($htmlOutput, $htmlContents);
		fwrite($plainOutput, $plainContents);
		fclose($htmlOutput);
		fclose($plainOutput);
		
		fwrite(STDOUT, "Exported html and plain text emails to export/\n");
		fwrite(STDOUT, "\n====================\n");
		$this->resetCounters();
	}
	
}